//
//  CodableHelper.swift
//
//  Generated by bow-openapi
//  Copyright Â© {{generatedYear}} Bow Authors. All rights reserved.
//

import Foundation
import Bow
import BowEffects

// MARK: - decoder helpers
public enum DecodingError: Error {
    case decoding(Swift.DecodingError)
    case other(Error)
}

public protocol ResponseDecoder {
    func safeDecode<T: Decodable>(_ type: T.Type, from: Data) -> IO<DecodingError, T>
}

extension JSONDecoder: ResponseDecoder {
    
    public func safeDecode<T: Decodable>(_ type: T.Type, from data: Data) -> IO<DecodingError, T> {
        IO.invoke {
            do {
                return try self.decode(T.self, from: data)
            } catch let error as Swift.DecodingError {
                throw DecodingError.decoding(error)
            } catch {
                throw DecodingError.other(error)
            }
        }
    }
}

// MARK: - encoder helpers
extension Encodable {
    var encodingParameters: [String: Any]? {
        guard let data = try? JSONEncoder().encode(self),
              let jsonObject = try? JSONSerialization.jsonObject(with: data, options: .allowFragments),
              let json = jsonObject as? [String: Any] else { return nil }
        
        return json
    }
}
