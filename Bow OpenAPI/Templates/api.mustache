{{#operations}}//
//  {{classname}}.swift
//
//  Generated by bow-openapi
//  Copyright Â© {{generatedYear}} Bow Authors. All rights reserved.
//

import Foundation
import Bow
import BowEffects

/// `{{classname}}` provider
public extension API {
    static var {{classVarName}}: {{classname}} {
        return {{classname}}Client()
    }
}

{{#operations}}
{{#description}}
/** {{description}} */{{/description}}{{^description}}
/// Protocol to define networking operations in `{{classVarName}}`
{{/description}}
public protocol {{classname}} {
{{#operation}}
    func _{{operationId}}({{#allParams}}{{^isHeaderParam}}, {{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}?{{/required}}{{/isHeaderParam}}{{/allParams}}) -> EnvIO<API.Config, API.HTTPError, {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>
{{/operation}}
}
{{/operations}}

{{#operations}}
extension {{classname}} {
{{#operation}}

    /**
     {{#summary}}
     {{{summary}}}
     {{/summary}}
     {{#headerParams}}
     {{^secondaryParam}}

     You should configure the `API.Config` using the following headers:
     {{/secondaryParam}}
     - Parameter {{paramName}}: (header) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/headerParams}}

     {{#allParams}}{{^isHeaderParam}}
     - Parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/isHeaderParam}}{{/allParams}}
     - Returns: An `EnvIO` to perform IO operations that produce errors of type `HTTPError` and values of type `{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}`, having access to an immutable environment of type `API.Config`. It can be seen as a Kleisli function `(API.Config) -> IO<API.HTTPError, {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>`.
     */
    public func {{operationId}}({{#allParams}}{{^isHeaderParam}}, {{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}{{/isHeaderParam}}{{/allParams}}) -> EnvIO<API.Config, API.HTTPError, {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {
        _{{operationId}}({{#allParams}}{{^isHeaderParam}}, {{paramName}}: {{paramName}}{{/isHeaderParam}}{{/allParams}})
    }
{{/operation}}
}
{{/operations}}


/// An HTTP client to perform networking operations related to `{{classVarName}}`
public class {{classname}}Client: {{classname}} {
{{#operation}}

    public func _{{operationId}}({{#allParams}}{{^isHeaderParam}}, {{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}?{{/required}}{{/isHeaderParam}}{{/allParams}}) -> EnvIO<API.Config, API.HTTPError, {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {
        return EnvIO { apiConfig in
            {{#bodyParam}}
            guard let parameters = {{paramName}}?.encodingParameters else {
                let error = API.HTTPError.other(error: NSError(domain: "{{classname}}.{{operationId}}.Parameter.{{paramName}}", code: 69, userInfo: nil))
                return IO.raiseError(.other(error: error))
            }

            {{/bodyParam}}
            // build request path
            {{^pathParams}}let{{/pathParams}}{{#pathParams}}{{^secondaryParam}}var{{/secondaryParam}}{{/pathParams}} resourcePath = "{{{path}}}"{{#pathParams}}
            let {{paramName}}PreEscape = "\({{paramName}}{{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}.rawValue{{/isContainer}}{{/isEnum}})"
            let {{paramName}}PostEscape = {{paramName}}PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            resourcePath = resourcePath.replacingOccurrences(of: "{{=<% %>=}}{<%baseName%>}<%={{ }}=%>", with: {{paramName}}PostEscape, options: .literal, range: nil){{/pathParams}}
            let path = apiConfig.basePath + resourcePath
            
            // make parameters
            {{^bodyParam}}{{#hasFormParams}}let formParams: [String: Any?] = [
                {{#formParams}}
                {{> _param}}{{#hasMore}},{{/hasMore}}
                {{/formParams}}
            ]
            let parameters: [String: Any]? = API.Helper.mapValuesItems(formParams){{/hasFormParams}}{{^hasFormParams}}let parameters: [String: Any]? = nil{{/hasFormParams}}{{/bodyParam}}{{#hasQueryParams}}
            var components = URLComponents(string: path)
            components?.queryItems = API.Helper.mapValuesToQueryItems([
        {{#queryParams}}
        {{> _param}}{{#hasMore}}, {{/hasMore}}
        {{/queryParams}}
            ]){{/hasQueryParams}}
            {{^hasQueryParams}}
            let components = URLComponents(string: path)
            {{/hasQueryParams}}
            
            // request configuration
            guard let url = components?.url ?? URL(string: path) else {
                let data = "{{classname}}.{{operationId}}.URL".data(using: .utf8)!
                return IO.raiseError(.malformedURL(response: URLResponse(), data: data))
            }

            var request = URLRequest(url: url)
            request.httpMethod = "{{httpMethod}}"
            request.addHeaders(apiConfig.headers)
            request.setParameters(parameters)

            // launch request
            return API.Helper.send(request: request, session: apiConfig.session, decoder: apiConfig.decoder)
        }
    }
{{/operation}}
}
{{/operations}}
{{#operations}}
{{#operation}}
{{#allParams}}
{{#isEnum}}

/**
 enum for parameter `{{paramName}}`
 */
public enum {{enumName}}_{{operationId}}: {{^isContainer}}{{{dataType}}}{{/isContainer}}{{#isContainer}}String{{/isContainer}} { {{#allowableValues}}{{#enumVars}}
    case {{name}} = {{#isContainer}}"{{/isContainer}}{{#isString}}"{{/isString}}{{{value}}}{{#isString}}"{{/isString}}{{#isContainer}}"{{/isContainer}}{{/enumVars}}{{/allowableValues}}
}
{{/isEnum}}
{{/allParams}}
{{/operation}}
{{/operations}}{{#operations}}
/* API.CONFIG.HEADERS
{{#operation}}{{#allParams}}{{#isHeaderParam}}
{{paramName}}:{{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}:{{baseName}}
{{/isHeaderParam}}{{/allParams}}{{/operation}}
*/{{/operations}}
