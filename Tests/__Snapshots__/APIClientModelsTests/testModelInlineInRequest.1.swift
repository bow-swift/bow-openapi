//
//  InlineAPI.swift
//
//  Generated by bow-openapi
//  Copyright Â© 2020 Bow Authors. All rights reserved.
//

import Foundation
import Bow
import BowEffects

/// `InlineAPI` provider
public extension API {
    static var `inline`: InlineAPI {
        return InlineAPIClient()
    }
}


/// Protocol to define networking operations in `inline`
public protocol InlineAPI {
    func _findPetsByStatus(status: [String]) -> EnvIO<API.Config, API.HTTPError, NoResponse>
}

extension InlineAPI {

    /**

     - Parameter status: (query)  
     - Returns: An `EnvIO` to perform IO operations that produce errors of type `HTTPError` and values of type `Void`, having access to an immutable environment of type `API.Config`.
     */
    public func findPetsByStatus(status: [String]) -> EnvIO<API.Config, API.HTTPError, NoResponse> {
        _findPetsByStatus(status: status)
    }
}


/// An HTTP client to perform networking operations related to `inline`
class InlineAPIClient: InlineAPI {

    func _findPetsByStatus(status: [String]) -> EnvIO<API.Config, API.HTTPError, NoResponse> {
        return EnvIO { apiConfig in
            // build request path
            let resourcePath = "/pet/findByStatus"
            let path = apiConfig.basePath + resourcePath
            
            // make parameters
            let parameters: [String: Any]? = nil
            var components = URLComponents(string: path)
            components?.queryItems = [
                        "status": status
            ].toQueryItems
            
            // request configuration
            guard let url = components?.url ?? URL(string: path) else {
                let data = "InlineAPI.findPetsByStatus.URL".data(using: .utf8)!
                return IO.raiseError(.malformedURL(response: URLResponse(), data: data))
            }

            var request = URLRequest(url: url)
            request.httpMethod = "GET"
            request.addHeaders(apiConfig.headers)
            request.setParameters(parameters)
            
            // launch request
            return API.send(request: request, session: apiConfig.session, decoder: apiConfig.decoder)
        }
    }
}

/**
 enum for parameter `status`
 */
public enum Status_findPetsByStatus: String { 
    case available = "available"
    case pending = "pending"
    case sold = "sold"
}

