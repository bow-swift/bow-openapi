//
//  {{classname}}.swift
//
//  Generated by bow-openapi
//  Copyright Â© {{generatedYear}} Bow Authors. All rights reserved.
//

import Foundation

public extension BowAPI {
    
    public enum APIHelper {
        public static func removeNil(_ source: [String: Any?]) -> [String: Any]? {
            let destination = source.filter { item in item.value != nil }
            return destination.isEmpty ? nil : destination
        }
        
        public static func removeNilItems(_ source: [String: Any?]) -> [String: String] {
            return source.reduce(into: [String: String]()) { (result, item) in
                if let collection = item.value as? Array<Any?> {
                    result[item.key] = collection.compactMap { "\($0!)" }.joined(separator: ",")
                } else if let value = item.value {
                    result[item.key] = "\(value)"
                }
            }
        }
        
        public static func convertBoolToString(_ source: [String: Any]?) -> [String: Any]? {
            guard let source = source else { return nil }
            
            return source.reduce(into: [String: Any](), { (result, item) in
                switch item.value {
                case let x as Bool:
                    result[item.key] = x.description
                default:
                    result[item.key] = item.value
                }
            })
        }
        
        public static func mapValuesToQueryItems(_ source: [String: Any?]) -> [URLQueryItem]? {
            let destination = removeNilItems(source).reduce(into: [URLQueryItem]()) { (result, item) in
                result.append(URLQueryItem(name: item.key, value: value))
            }
            
            return destination.isEmpty ? nil : destination
        }
    }
}
